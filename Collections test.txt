1) Describe the collections Type hierarchy. What are the Main Interfaces, and What Are the differencces between them?
	The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.it is single unit of object.
	Collection framework provides many interfaces (Set, List, Queue, Deque) :
						
								Iterable
								
								Collection
								
						List       Set               SortedSet      Queue
					ArrayList    Hashet            TreeSet
					LinkedList  LinkedHashSet
					
					
	An Interface in Java programming language is defined as an abstract type used to specify the behavior of a class.
	interface in Java is a blueprint of a behaviour. A Java interface contains static constants and abstract methods.
	
2) Describe Various Implementations of the Map Interface and their Use Case Differences
			A map contains values on the basis of key, i.e. key and value pair. Each key and value pair is known as an entry.
			Map-Extends-SortedMap-Implements-TreeMap-Implements-HashMap-Extends-LinkedHashMap

3) Difference  between TreeSet and HashSet?
			Hash Set	                                                                                    

Hash set : HashSet is implemented using HashTable. 
			   HashSet allows a null object. 
			   Hash set use equals method to compare two objects.
			   Hash set doesn't now allow a heterogeneous object. 
			   HashSet does not maintain any order
Tree Set: The tree set is implemented using a tree structure. 
              The tree set does not allow the null object. It throws the null pointer exception. 
			  Tree set use compare method for comparing two objects. 
			  Tree set allows a heterogeneous object 
			  TreeSet maintains an object in sorted order 

5) what is fail fast and fail safe Iterator?
	Fail Fast Iterator:
       1)The iterator in Java is used to traverse over a collection's objects.
       2)The collections return two types of iterators, either it will be Fail Fast or Fail Safe.
       3)The Fail Fast iterators immediately throw ConcurrentModificationException in case of structural modification of the collection.
       4)Structural modification means adding, removing, updating the value of an element in a data collection.
   FailSafe Iterator :-
       1)We can perform the modification operations on a collection while iterating over it.
       2)They will not throw ConcurrentModificationException during the iteration.
       3)The Fail Safe iterators use a copy of the collection to traverse over the elements.
       4)Unlike the Fail Fast, they require more memory as they cloned the collection.
       5)The examples of Fail Safe iterators are ConcurrentHashMap, CopyOnWriteArrayList, etc.
	   
6)How to Convert String to Stream of chars?
	Steps to convert String to Stream of Chars :-  
       1)Get the String.
       2)Create a List of Characters.
       3)Convert to String to IntStream using chars() method.
       4)Convert IntStream to Stream using mapToObj() method.
       5)Collect the elements as a List Of Characters using collect()
       6)Return the List.
	   
7)Explain Spliterator API?
	Spliterators can be used for traversing the elements of a source one by one.
	The main functionalities of Spliterator are-
	  > Splitting the source data
      > Processing the source data
	 It is included in JDK 8 for support of efficient parallel traversal in addition to sequential traversal.
	 can use Spliterator even if you wonâ€™t be using parallel execution.
			
9)What is Spring Core?
	Spring Core  is the core of the framework that power features such as Inversion of Control and dependency injection. 
    Beans provides Beanfactory,which is a sophisticated implementation of the factory pattern.
	
10)Explain Dependency Injection?How to achieve it?
	Dependency Injection in Java is a way to achieve Inversion of control (IoC) in our application by moving objects 
    binding from compile time to runtime.
   We can achieve IoC through Factory Pattern,Template Method Design Pattern, Strategy Pattern and 
   Service Locator pattern.
   
 11)How can we inject Beans in spring?
	The @ComponentScan annotation is used to find beans and the corresponding injected with @Autowired annotation.
	Before we begin with Injecting Bean References as List, Set, or Map we will first create an abstract class and a couple sub classes.
	
15)Eplain 
1.Spring AOP
	. Aspect Oriented Programming  compliments OOPs in the sense that it also provides modularity. But the key unit of modularity is aspect than class.
	. AOP breaks the program logic into distinct parts.
	. There are 5 methods:
	 > Understanding Scenario
	 > Problem without AOP
	 > Solution with AOP
2. IOC
	. IoC is the mechanism to achieve loose-coupling between Objects dependencies.
	. To achieve loose coupling and dynamic binding of the objects at runtime, objects dependencies are injected by other assembler objects.
	. To instantiate the application class
    . To configure the object
	. To assemble the dependencies between the objects
3. POJO
    . It is an ordinary object, which is not bound by any special restriction. The POJO file does not require any special classpath.
	. They are easy to read and write.
	. A POJO class does not have any naming convention for properties and methods.
4.@Component
	. a component is an identifiable part of a larger program or construction.
	
5.@ComponentScan
	. one method of asking Spring to detect Spring managed components. 
	. Spring can auto scan, detect, and instantiate components from pre-defined project packages.
	

16)Write a program to add 5 Countries with their country code and perform the below task
1.Choose any dataa structure to add the above details.
2. get the countries name with country code by using Lambda expression.
3.Search for the particular country name with it's code.
4.delete the country info with it's matching country code.
	
package com.xworkz.test1;

import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.TreeMap;

public class Country {
	public static void main(String[] args) {
		Map<String, Integer> map=new TreeMap<String, Integer>();
		map.put("India", 91);
		map.put("Canada", 52);
		map.put("UP", 18);
		map.put("Bengal", 15);
		map.put("Koriya", 42);
		
		Set<Entry<String, Integer>> entry= map.entrySet();
		entry.forEach(ele->System.out.println(ele));
		
		map.forEach((key,value)->{if(value==52) {System.out.println(key);}});
			
		Iterator<Entry<String, Integer>> itr=entry.iterator();
		while(itr.hasNext()) {
			Entry<String, Integer> ent= itr.next();
			if(ent.getValue()==42) {
				itr.remove();
				for (Entry<String, Integer> entry2 : entry) {
					System.out.println(entry2);
				}
			}
		}
		
		
	}
}
